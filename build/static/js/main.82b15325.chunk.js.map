{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QRCode","require","App","useState","viewDetails","setViewDetails","Meta","Card","columns","name","options","filter","display","label","sortDirection","sort","customBodyRender","type","onClick","access_token","docDetails","setDocDetails","patientsData","setPatientsData","queriedPatient","setqueriedPatient","patientId","docId","useEffect","axios","url","method","headers","Authorization","then","response","data","firstName","lastName","EmailAddress","profileId","Dob","Qualifications","address","Text","Typography","Fragment","gutter","xs","sm","md","lg","span","orientation","style","fontWeight","theme","createMuiTheme","palette","overrides","MUIDataTable","root","backgroundColor","typography","useNextVariants","filterType","responsive","map","i","Object","values","hoverable","cover","value","title","description","strong","float","country","JSON","stringify","zIndex","visible","onOk","onCancel","footer","key","q","id","padding","prescription","encounterTime","location","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82b15325.chunk.js","sourcesContent":["import { createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\nimport { Button, Card, Col, Divider, Modal, Row, Typography } from \"antd\";\nimport axios from \"axios\";\nimport MUIDataTable from \"mui-datatables\";\nimport React, { useEffect, useState } from \"react\";\n\nvar QRCode = require(\"qrcode.react\");\n\nexport default function App() {\n  const [viewDetails, setViewDetails] = useState(false);\n  const { Meta } = Card;\n  const columns = [\n    {\n      name: \"Record Id\",\n      options: {\n        filter: true,\n        display: \"excluded\",\n      },\n    },\n    {\n      label: \"Patient Id\",\n      name: \"Patient Id\",\n      options: {\n        filter: true,\n        sortDirection: \"asc\",\n      },\n    },\n    {\n      name: \"Doctor Id\",\n      options: {\n        filter: false,\n      },\n    },\n    {\n      name: \"Gender\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      name: \"Age\",\n      options: {\n        filter: true,\n        sort: false,\n      },\n    },\n    {\n      name: \"View Details\",\n      options: {\n        filter: true,\n        sort: false,\n        customBodyRender: () => (\n          <Button type=\"primary\" onClick={() => setViewDetails(true)}>\n            View Details\n          </Button>\n        ),\n      },\n    },\n  ];\n  const options = {\n    filter: true,\n    filterType: \"dropdown\",\n    responsive: \"stacked\",\n  };\n  // too be changed\n\n  const access_token =\n    \"V3zRqS6NOrfl18M5D4BeZvrmPHutrSoOeUbV35BIVXm5LS2iMB2noEhAkE1EdWGb\";\n\n  const [docDetails, setDocDetails] = useState([]);\n  const [patientsData, setPatientsData] = useState([]);\n  const [queriedPatient, setqueriedPatient] = useState([]);\n  const [patientId, setPatientId] = useState(\"joshi19981998@gmail.com\");\n  const docId = \"pmcool97@gmail.com\";\n  useEffect(() => {\n    axios({\n      url: `http://segurodroga.ml:3000/api/DoctorProfile/${docId}`,\n      method: \"get\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    }).then((response) => setDocDetails(response.data));\n    axios({\n      url: `http://segurodroga.ml:3000/api/Patient`,\n      method: \"get\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    }).then((response) => setPatientsData(response.data));\n    axios({\n      url: `http://segurodroga.ml:3000/api/queries/selectMedicalRecordByDoctorAndPatientId?DoctorId=?doctorId=${docId}&doctorId=vrkarthik14@gmail.com&patientId=${patientId}`,\n      method: \"get\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    }).then((response) => setqueriedPatient(response.data));\n  }, [patientId]);\n  const {\n    firstName,\n    lastName,\n    EmailAddress,\n    profileId,\n    Dob,\n    Qualifications,\n    address,\n  } = docDetails;\n  const { Text } = Typography;\n  const getMuiTheme = () =>\n    createMuiTheme({\n      palette: { type: \"dark\" },\n      overrides: {\n        MUIDataTable: { root: { backgroundColor: \"#141414\" } },\n      },\n      typography: { useNextVariants: true },\n    });\n  return (\n    <React.Fragment>\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n        <Col span={16}>\n          <Card>\n            <Divider orientation=\"left\" style={{ fontWeight: \"bold\" }}>\n              Patients Details\n            </Divider>{\" \"}\n            <MuiThemeProvider theme={getMuiTheme()}>\n              <MUIDataTable\n                options={options}\n                data={patientsData.map((i) => {\n                  return Object.values(i);\n                })}\n                columns={columns}\n              />\n            </MuiThemeProvider>\n          </Card>\n        </Col>\n        <Col span={1} />\n        <Card\n          hoverable\n          cover={<QRCode value=\"http://facebook.github.io/react/\" />}\n        >\n          <Meta\n            title={`Dr.${firstName} ${lastName}`}\n            description={`${EmailAddress}`}\n          />\n          <Divider orientation=\"left\" style={{ fontWeight: \"bold\" }}>\n            Details\n          </Divider>{\" \"}\n          <div style={{ display: \"block\" }}>\n            <Text strong>DoctorId: </Text>\n            <Text style={{ float: \"right\" }}>{profileId}</Text>\n            <br />\n            <Text strong>DOB: </Text>\n            <Text style={{ float: \"right\" }}> {Dob}</Text>\n            <br />\n            <Text strong>Qualifications: </Text>\n            <Text style={{ float: \"right\" }}>{Qualifications}</Text>\n            <br />\n            <Text strong>Address: </Text>\n            <Text style={{ float: \"right\" }}>{profileId}</Text>\n            <br />\n            <Text strong>Country:</Text>{\" \"}\n            <Text style={{ float: \"right\" }}>\n              {address && Object.values(address.country)}\n            </Text>\n            <br />\n          </div>\n        </Card>\n      </Row>\n      <pre>{JSON.stringify(queriedPatient, null, 4)}</pre>\n      <Modal\n        style={{ zIndex: 9999999 }}\n        title=\"Patient Details\"\n        visible={viewDetails}\n        onOk={() => setViewDetails(false)}\n        onCancel={() => setViewDetails(false)}\n        footer={[\n          <Button key=\"back\" onClick={() => setViewDetails(false)}>\n            Okay\n          </Button>,\n        ]}\n      >\n        <Card>\n          {queriedPatient.map((q) => (\n            <div key={q.id}>\n              <Meta\n                title={q.patientId}\n                description={`\n              Description: ${q.description}\n        `}\n              />{\" \"}\n              <div style={{ padding: 10 }} />\n              <p>\n                {\" \"}\n                {`Prescription: ${q.prescription}\n                Encounter Time: ${q.encounterTime}\n                 Location: ${q.location}`}\n              </p>\n            </div>\n          ))}\n        </Card>\n      </Modal>\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}